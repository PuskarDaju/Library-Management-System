@model List<Library_Management_System.Models.Book>
@{
    Layout = "_StudentLayout";
    ViewData["Title"] = "Library";
}
<div class="container mx-auto px-4 py-6">
    <!-- Search Bar -->
    <div class="mb-8">
        <input 
            type="text" 
            id="searchInput"
            placeholder="Search for books..."
            class="w-full md:w-1/2 p-3 rounded shadow border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        />
    </div>

    <!-- New Books Section -->
    <div class="mb-12">
        <h2 class="text-2xl font-bold text-gray-800 mb-4">New Arrivals</h2>
        <div id="newBooksContainer" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            <!-- New books rendered via JS -->
        </div>
    </div>

    <!-- All Books Section -->
    <div class="mb-12">
        <h2 class="text-2xl font-bold text-gray-800 mb-4">All Books</h2>
        <div id="booksContainer" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          
        </div>
    </div>
</div>

@section Scripts {
<script>
    const booksContainer = document.getElementById('booksContainer');
    const newBooksContainer = document.getElementById('newBooksContainer');
    const searchInput = document.getElementById('searchInput');
    function normalizeBook(book) {
        return {
            Book_id: book.Book_id || book.book_id,
            Book_Name: book.Book_Name || book.book_Name,
            Author: book.Author || book.author,
            Publisher: book.Publisher || book.publisher,
            Price: book.Price ||book.price,
            Image_Url:book.Image_Url||book.image_Url
        };
    }
    async function loadAllBooks() {
        let allBooks=[];
        let page=1;
        let pageSize=6;
        let totalPages=1;
        do{
            const response=await fetch(`/api/Student/paginated?page=${page}&size=${pageSize}`);
            const data = await response.json();
            allBooks =data.items;
            totalPages = data.totalPages;
            page++;
            renderBooks(booksContainer, allBooks,true);
            
        }while(page<=totalPages);
    }
    
    $(document).ready(function () {
       loadAllBooks();
    });


    

    function createBookCard(book) {
        const card = document.createElement('div');
        card.className = 'bg-white rounded-lg shadow hover:shadow-xl transition overflow-hidden flex flex-col';
        card.innerHTML = `
            <img src="${book.Image_Url}" alt="${book.Book_Name}" class="w-full h-48 object-cover">
            <div class="p-4 flex-1 flex flex-col justify-between">
                <div>
                    <h3 class="font-semibold text-lg text-gray-800">${book.Book_Name}</h3>
                    <p class="text-gray-500 mt-1">by ${book.Author}</p>
                </div>
                <div class="mt-3 flex justify-between items-center">
                    <span class="text-indigo-600 font-bold">Rs.${book.Price.toFixed(2)}</span>
                    <div class="space-x-2">
                        <button onclick="rentBook(${book.Book_id})" class="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600 transition text-sm">Rent</button>
                        <button onclick="buyBook(${book.Book_id})" class="bg-indigo-600 text-white px-3 py-1 rounded hover:bg-indigo-700 transition text-sm">Buy</button>
                    </div>
                </div>
            </div>
        `;
        return card;
    }

   
    function renderBooks(container, booksArray,append=false) {
       if(!append)
            container.innerHTML = '';
        booksArray.forEach(book => {
            book = normalizeBook(book);
            container.appendChild(createBookCard(book));
        });
    }


    const newestBooks = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));
    renderBooks(newBooksContainer, newestBooks);
    
    

</script>
}

  