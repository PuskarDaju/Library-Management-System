@model Library_Management_System.Models.EditBookView;
@{
    ViewData["Title"] = "Edit Book";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Edit Book</h5>
                </div>
                <div class="card-body">
                    <form id="bookForm">
                        <div class="mb-3">
                            <label for="BookName" class="form-label">Book Name</label>
                            <input type="text" class="form-control" id="BookName" name="book_name" placeholder="Enter book name" value="@Model.Book.Book_Name" required />
                            <span class="text-danger small" id="BookNameError"></span>
                        </div>

                        <!-- Author -->
                        <div class="mb-3">
                            <label for="Author" class="form-label">Author</label>
                            <input type="text" class="form-control" id="Author" name="author" placeholder="Enter author name" value="@Model.Book.Author" required />
                            <span class="text-danger small" id="AuthorError"></span>
                        </div>

                        <!-- Publisher -->
                        <div class="mb-3">
                            <label for="Publisher" class="form-label">Publisher</label>
                            <input type="text" class="form-control" id="Publisher" name="publisher" placeholder="Enter publisher" value="@Model.Book.Publisher" />
                            <span class="text-danger small" id="PublisherError"></span>
                        </div>

                        <!-- ISBN -->
                        <div class="mb-3">
                            <label for="ISBN" class="form-label">ISBN</label>
                            <input type="text" class="form-control" id="ISBN" name="isbn" placeholder="Enter ISBN number" value="@Model.Book.ISBN" required />
                            <span class="text-danger small" id="ISBNError"></span>
                        </div>

                        <!-- Category -->
                        <div class="mb-3">
                            <label for="CategoryId" class="form-label">Category</label>
                            <select class="form-select" id="CategoryId" name="category_id" required>
                                <option value="">Select a category</option>
                               
                                @foreach (var category in Model.Categories)
                                {
                                    if (category.Category_Id == Model.Book.Category_Id)
                                    {
                                        <option value="@category.Category_Id" selected>@category.Category_Name</option>
                                    }
                                    else
                                    {
                                        <option value="@category.Category_Id">@category.Category_Name</option>
                                    }
                                }
                            </select>

                            <span class="text-danger small" id="CategoryIdError"></span>
                        </div>

                        <!-- Price -->
                        <div class="mb-3">
                            <label for="Price" class="form-label">Price</label>
                            <input type="number" step="0.01" class="form-control" id="Price" name="price" placeholder="Enter price" value="@Model.Book.Price" required />
                            <span class="text-danger small" id="PriceError"></span>
                        </div>

                        <!-- Publication Date -->
                        <div class="mb-3">
                            <label for="PublicationDate" class="form-label">Publication Date</label>
                            <input type="date" class="form-control" id="PublicationDate" name="publication_date"
                                   value="@(Model.Book.publication_Date.HasValue ? Model.Book.publication_Date.Value.ToString("yyyy-MM-dd") : "")"
                                   required />
                            <span class="text-danger small" id="PublicationDateError"></span>
                        </div>

                        <!-- Quantity -->
                        <div class="mb-3">
                            <label for="Quantity" class="form-label">Quantity</label>
                            <input type="number" class="form-control" id="Quantity" name="quantity" placeholder="Enter available quantity" min="1" value="@Model.Book.Quantity" />
                            <span class="text-danger small" id="QuantityError"></span>
                        </div>
                        
                        <div class="mb-3">
                            <!-- ✅ Image preview section -->
                            <div class="mt-3 text-center">
                                <p class="text-muted mb-1">Current Image Preview:</p>
                                <div class="border rounded p-2 d-inline-block bg-light">
                                    <img id="oldImagePreview" 
                                         src="@Model.Book.Image_Url" 
                                         alt="Book Image" 
                                         class="img-thumbnail" 
                                         style="max-width: 180px; height: auto;" />
                                </div>
                            </div>
                            
                            <label for="Image" class="form-label">Book Image</label>
                            <input type="file" class="form-control" id="Image" name="image" />

                            <span class="text-danger" id="ImageError"></span>
                        </div>

                        <!-- Submit Button -->
                        <button type="submit" class="btn btn-success w-100">Update Book</button>
                    </form>

                    <div id="message" class="mt-3"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
$(document).ready(function () {

    $("#bookForm").on("submit", async (e) => {
        e.preventDefault();
        let isValid = true;

        $("span.text-danger").text("");
        var category_id = document.getElementById("CategoryId").value;

        if (category_id === "" || category_id === null) {
            $("#CategoryIdError").text("Category is required");
            isValid = false;
            return;
        }

        $("#bookForm input, #bookForm select").each(function () {
            let input = $(this);
            let value = input.val().trim();
            let errorSpan = $("#" + input.attr("id") + "Error");

            if (input.prop("required") && (value === "" || value === null)) {
                errorSpan.text("This field cannot be empty");
                isValid = false;
            }
        });
        let file=null;
        if($('#image')!=null) {
             file = $("#Image")[0].files[0];
                const allowedExtensions = ['image/jpg', 'image/jpeg', 'image/png', "image/webp"];
                if (!allowedExtensions.includes(file.type) || file.size > 2 * 1024 * 1024) {
                    $("#ImageError").text("please upload a image (only) with size less than 2MB");
                    isValid = false;
                }
        }


        if (isValid) {
            Swal.fire({
                title: "Are you sure?",
                text: "This book will be updated in the database",
                showCancelButton: true,
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const bookId = @Model.Book.Book_id;
                        const formData = new FormData();
                        formData.append("BookId", bookId);
                        formData.append("CategoryId", category_id);
                        formData.append("BookName", $("#BookName").val());
                        formData.append("Author", $("#Author").val());
                        formData.append("Publisher", $("#Publisher").val());
                        formData.append("ISBN", $("#ISBN").val());
                        formData.append("Price", $("#Price").val());
                        formData.append("Quantity", $("#Quantity").val());
                        formData.append("PublishDate", $("#PublicationDate").val());
                        if(file!=null) {
                            formData.append("Image", file);
                        }
                        
                        const response = await fetch(`/api/book-api/update`,{
                            method: 'PUT',
                            body: formData,
                        });
                        if (response.ok) {
                            Swal.fire({
                                icon: "success",
                                text: "Book has been updated successfully",
                                showConfirmButton: true,
                                timer: 1500,
                            }).then(() => {
                                window.location.href = "/book";
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                text: "Something went wrong",
                                showConfirmButton: true,
                                timer: 1500,
                            });
                        }
                    } catch (error) {
                        console.log(error);
                    }
                }
            });
        }
    });

    $("#bookForm input, #bookForm select").on("input change", function () {
        $("#" + $(this).attr("id") + "Error").text("");
    });

});
</script>
}
